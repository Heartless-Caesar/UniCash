{"ast":null,"code":"import StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\n\nfunction chunkArray() {\n  var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var size = arguments.length > 1 ? arguments[1] : undefined;\n  if (array === []) return [];\n  return array.reduce(function (acc, val) {\n    if (acc.length === 0) acc.push([]);\n    var last = acc[acc.length - 1];\n\n    if (last.length < size) {\n      last.push(val);\n    } else {\n      acc.push([val]);\n    }\n\n    return acc;\n  }, []);\n}\n\nfunction calculateDimensions(_ref) {\n  var itemDimension = _ref.itemDimension,\n      staticDimension = _ref.staticDimension,\n      totalDimension = _ref.totalDimension,\n      fixed = _ref.fixed,\n      spacing = _ref.spacing,\n      maxItemsPerRow = _ref.maxItemsPerRow;\n  var usableTotalDimension = staticDimension || totalDimension;\n  var availableDimension = usableTotalDimension - spacing;\n  var itemTotalDimension = Math.min(itemDimension + spacing, availableDimension);\n  var itemsPerRow = Math.min(Math.floor(availableDimension / itemTotalDimension), maxItemsPerRow || Infinity);\n  var containerDimension = availableDimension / itemsPerRow;\n  var fixedSpacing;\n\n  if (fixed) {\n    fixedSpacing = (totalDimension - itemDimension * itemsPerRow) / (itemsPerRow + 1);\n  }\n\n  return {\n    itemTotalDimension: itemTotalDimension,\n    availableDimension: availableDimension,\n    itemsPerRow: itemsPerRow,\n    containerDimension: containerDimension,\n    fixedSpacing: fixedSpacing\n  };\n}\n\nfunction getStyleDimensions(style) {\n  var horizontal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var space1 = 0;\n  var space2 = 0;\n  var maxStyleDimension = undefined;\n\n  if (style) {\n    var flatStyle = Array.isArray(style) ? StyleSheet.flatten(style) : style;\n    var sMaxDimensionXY = 'maxWidth';\n    var sPaddingXY = 'paddingHorizontal';\n    var sPadding1 = 'paddingLeft';\n    var sPadding2 = 'paddingRight';\n\n    if (horizontal) {\n      sMaxDimensionXY = 'maxHeight';\n      sPaddingXY = 'paddingVertical';\n      sPadding1 = 'paddingTop';\n      sPadding2 = 'paddingBottom';\n    }\n\n    if (flatStyle[sMaxDimensionXY] && typeof flatStyle[sMaxDimensionXY] === 'number') {\n      maxStyleDimension = flatStyle[sMaxDimensionXY];\n    }\n\n    var padding = flatStyle[sPaddingXY] || flatStyle.padding;\n    var padding1 = flatStyle[sPadding1] || padding || 0;\n    var padding2 = flatStyle[sPadding2] || padding || 0;\n    space1 = typeof padding1 === 'number' ? padding1 : 0;\n    space2 = typeof padding2 === 'number' ? padding2 : 0;\n  }\n\n  return {\n    space1: space1,\n    space2: space2,\n    maxStyleDimension: maxStyleDimension\n  };\n}\n\nfunction getAdjustedTotalDimensions(_ref2) {\n  var totalDimension = _ref2.totalDimension,\n      maxDimension = _ref2.maxDimension,\n      contentContainerStyle = _ref2.contentContainerStyle,\n      style = _ref2.style,\n      _ref2$horizontal = _ref2.horizontal,\n      horizontal = _ref2$horizontal === void 0 ? false : _ref2$horizontal,\n      _ref2$adjustGridToSty = _ref2.adjustGridToStyles,\n      adjustGridToStyles = _ref2$adjustGridToSty === void 0 ? false : _ref2$adjustGridToSty;\n  var componentDimension = totalDimension;\n  var actualMaxDimension = totalDimension;\n\n  if (maxDimension && totalDimension > maxDimension) {\n    actualMaxDimension = maxDimension;\n    totalDimension = maxDimension;\n  }\n\n  if (adjustGridToStyles) {\n    if (contentContainerStyle) {\n      var _getStyleDimensions = getStyleDimensions(contentContainerStyle, horizontal),\n          space1 = _getStyleDimensions.space1,\n          space2 = _getStyleDimensions.space2,\n          maxStyleDimension = _getStyleDimensions.maxStyleDimension;\n\n      if (maxStyleDimension && totalDimension > maxStyleDimension) {\n        actualMaxDimension = maxStyleDimension;\n        totalDimension = maxStyleDimension;\n      }\n\n      if (space1 || space2) {\n        totalDimension = totalDimension - space1 - space2;\n      }\n    }\n\n    if (style) {\n      var edgeSpaceDiff = (componentDimension - actualMaxDimension) / 2;\n\n      var _getStyleDimensions2 = getStyleDimensions(style, horizontal),\n          _space = _getStyleDimensions2.space1,\n          _space2 = _getStyleDimensions2.space2;\n\n      if (_space > edgeSpaceDiff) {\n        totalDimension = totalDimension - (_space - edgeSpaceDiff);\n      }\n\n      if (_space2 > edgeSpaceDiff) {\n        totalDimension = totalDimension - (_space2 - edgeSpaceDiff);\n      }\n    }\n  }\n\n  return totalDimension;\n}\n\nfunction generateStyles(_ref3) {\n  var itemDimension = _ref3.itemDimension,\n      containerDimension = _ref3.containerDimension,\n      spacing = _ref3.spacing,\n      fixed = _ref3.fixed,\n      horizontal = _ref3.horizontal,\n      fixedSpacing = _ref3.fixedSpacing;\n  var rowStyle = {\n    flexDirection: 'row',\n    paddingLeft: fixed ? fixedSpacing : spacing,\n    paddingBottom: spacing\n  };\n  var containerStyle = {\n    flexDirection: 'column',\n    justifyContent: 'center',\n    width: fixed ? itemDimension : containerDimension - spacing,\n    marginRight: fixed ? fixedSpacing : spacing\n  };\n\n  if (horizontal) {\n    rowStyle = {\n      flexDirection: 'column',\n      paddingTop: fixed ? fixedSpacing : spacing,\n      paddingRight: spacing\n    };\n    containerStyle = {\n      flexDirection: 'row',\n      justifyContent: 'center',\n      height: fixed ? itemDimension : containerDimension - spacing,\n      marginBottom: fixed ? fixedSpacing : spacing\n    };\n  }\n\n  return {\n    containerStyle: containerStyle,\n    rowStyle: rowStyle\n  };\n}\n\nexport { chunkArray, calculateDimensions, generateStyles, getAdjustedTotalDimensions };","map":{"version":3,"names":["chunkArray","array","size","reduce","acc","val","length","push","last","calculateDimensions","itemDimension","staticDimension","totalDimension","fixed","spacing","maxItemsPerRow","usableTotalDimension","availableDimension","itemTotalDimension","Math","min","itemsPerRow","floor","Infinity","containerDimension","fixedSpacing","getStyleDimensions","style","horizontal","space1","space2","maxStyleDimension","undefined","flatStyle","Array","isArray","StyleSheet","flatten","sMaxDimensionXY","sPaddingXY","sPadding1","sPadding2","padding","padding1","padding2","getAdjustedTotalDimensions","maxDimension","contentContainerStyle","adjustGridToStyles","componentDimension","actualMaxDimension","edgeSpaceDiff","generateStyles","rowStyle","flexDirection","paddingLeft","paddingBottom","containerStyle","justifyContent","width","marginRight","paddingTop","paddingRight","height","marginBottom"],"sources":["/home/cesa/Github/UniCash-1/App/node_modules/react-native-super-grid/utils.js"],"sourcesContent":["import { StyleSheet } from 'react-native';\n\nfunction chunkArray(array = [], size) {\n  if (array === []) return [];\n  return array.reduce((acc, val) => {\n    if (acc.length === 0) acc.push([]);\n    const last = acc[acc.length - 1];\n    if (last.length < size) {\n      last.push(val);\n    } else {\n      acc.push([val]);\n    }\n    return acc;\n  }, []);\n}\n\nfunction calculateDimensions({\n  itemDimension,\n  staticDimension,\n  totalDimension,\n  fixed,\n  spacing,\n  maxItemsPerRow,\n}) {\n  const usableTotalDimension = staticDimension || totalDimension;\n  const availableDimension = usableTotalDimension - spacing; // One spacing extra\n  const itemTotalDimension = Math.min(itemDimension + spacing, availableDimension); // itemTotalDimension should not exceed availableDimension\n  const itemsPerRow = Math.min(Math.floor(availableDimension / itemTotalDimension), maxItemsPerRow || Infinity);\n  const containerDimension = availableDimension / itemsPerRow;\n\n  let fixedSpacing;\n  if (fixed) {\n    fixedSpacing = (totalDimension - (itemDimension * itemsPerRow)) / (itemsPerRow + 1);\n  }\n\n  return {\n    itemTotalDimension,\n    availableDimension,\n    itemsPerRow,\n    containerDimension,\n    fixedSpacing,\n  };\n}\n\nfunction getStyleDimensions(\n  style,\n  horizontal = false,\n) {\n  let space1 = 0;\n  let space2 = 0;\n  let maxStyleDimension = undefined;\n  if (style) {\n    const flatStyle = Array.isArray(style) ? StyleSheet.flatten(style) : style;\n    let sMaxDimensionXY = 'maxWidth';\n    let sPaddingXY = 'paddingHorizontal';\n    let sPadding1 = 'paddingLeft';\n    let sPadding2 = 'paddingRight';\n    if (horizontal) {\n      sMaxDimensionXY = 'maxHeight';\n      sPaddingXY = 'paddingVertical';\n      sPadding1 = 'paddingTop';\n      sPadding2 = 'paddingBottom';\n    }\n\n    if (flatStyle[sMaxDimensionXY] && typeof flatStyle[sMaxDimensionXY] === 'number') {\n      maxStyleDimension = flatStyle[sMaxDimensionXY];\n    }\n\n    const padding = flatStyle[sPaddingXY] || flatStyle.padding;\n    const padding1 = flatStyle[sPadding1] || padding || 0;\n    const padding2 = flatStyle[sPadding2] || padding || 0;\n    space1 = (typeof padding1 === 'number' ? padding1 : 0);\n    space2 = (typeof padding2 === 'number' ? padding2 : 0);\n  }\n  return { space1, space2, maxStyleDimension };\n}\n\nfunction getAdjustedTotalDimensions({\n  totalDimension,\n  maxDimension,\n  contentContainerStyle,\n  style,\n  horizontal = false,\n  adjustGridToStyles = false,\n}) {\n  const componentDimension = totalDimension; // keep track of initial max of component/screen\n  let actualMaxDimension = totalDimension; // keep track of smallest max dimension\n\n  // adjust for maxDimension prop\n  if (maxDimension && totalDimension > maxDimension) {\n    actualMaxDimension = maxDimension;\n    totalDimension = maxDimension;\n  }\n  \n  if (adjustGridToStyles) {\n    if (contentContainerStyle) {\n      const { space1, space2, maxStyleDimension } = getStyleDimensions(contentContainerStyle, horizontal);\n      // adjust for maxWidth or maxHeight in contentContainerStyle\n      if (maxStyleDimension && totalDimension > maxStyleDimension) {\n        actualMaxDimension = maxStyleDimension;\n        totalDimension = maxStyleDimension;\n      }\n      // subtract horizontal or vertical padding from totalDimension\n      if (space1 || space2) {\n        totalDimension = totalDimension - space1 - space2;\n      }\n    }\n\n    if (style) {\n      const edgeSpaceDiff = (componentDimension - actualMaxDimension) / 2; // if content is floating in middle of screen get margin on either side\n      const { space1, space2 } = getStyleDimensions(style, horizontal);\n      // only subtract if space is greater than the margin on either side\n      if (space1 > edgeSpaceDiff) {\n        totalDimension = totalDimension - (space1 - edgeSpaceDiff); // subtract the padding minus any remaining margin\n      }\n      if (space2 > edgeSpaceDiff) {\n        totalDimension = totalDimension - (space2 - edgeSpaceDiff); // subtract the padding minus any remaining margin\n      }\n    }\n  }\n\n  return totalDimension;\n}\n\nfunction generateStyles({\n  itemDimension,\n  containerDimension,\n  spacing,\n  fixed,\n  horizontal,\n  fixedSpacing,\n}) {\n  let rowStyle = {\n    flexDirection: 'row',\n    paddingLeft: fixed ? fixedSpacing : spacing,\n    paddingBottom: spacing,\n  };\n\n  let containerStyle = {\n    flexDirection: 'column',\n    justifyContent: 'center',\n    width: fixed ? itemDimension : (containerDimension - spacing),\n    marginRight: fixed ? fixedSpacing : spacing,\n  };\n\n  if (horizontal) {\n    rowStyle = {\n      flexDirection: 'column',\n      paddingTop: fixed ? fixedSpacing : spacing,\n      paddingRight: spacing,\n    };\n\n    containerStyle = {\n      flexDirection: 'row',\n      justifyContent: 'center',\n      height: fixed ? itemDimension : (containerDimension - spacing),\n      marginBottom: fixed ? fixedSpacing : spacing,\n    };\n  }\n\n  return {\n    containerStyle,\n    rowStyle,\n  };\n}\n\nexport { chunkArray, calculateDimensions, generateStyles, getAdjustedTotalDimensions };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}